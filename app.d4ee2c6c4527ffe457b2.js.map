{"version":3,"sources":["webpack:///./app/actions/todos.ts","webpack:///./app/components/TodoItem/style.css?4c11","webpack:///./app/components/Footer/style.css?30f7","webpack:///./app/components/TodoTextInput/style.css?71e8","webpack:///./app/components/TodoList/style.css?14c4","webpack:///./app/models/TodoModel.ts","webpack:///./app/models/index.ts","webpack:///./app/index.tsx","webpack:///./app/containers/App/style.css","webpack:///./app/components/Footer/index.tsx","webpack:///./app/components/TodoTextInput/index.tsx","webpack:///./app/components/Header/index.tsx","webpack:///./app/components/TodoItem/index.tsx","webpack:///./app/components/TodoList/index.tsx","webpack:///./app/containers/App/index.tsx","webpack:///./xevents.ts","webpack:///./xfeature.ts","webpack:///./app/reducers/todos.ts","webpack:///./app/reducers/index.ts","webpack:///./app/middleware/logger.ts","webpack:///./app/store/index.ts","webpack:///./main.tsx"],"names":["TodoActions","Type","addTodo","ADD_TODO","editTodo","EDIT_TODO","deleteTodo","DELETE_TODO","completeTodo","COMPLETE_TODO","completeAll","COMPLETE_ALL","clearCompleted","CLEAR_COMPLETED","useTodoActions","dispatch","actions","module","exports","TodoModel","Filter","App","path","component","FILTER_TITLES","SHOW_ALL","SHOW_ACTIVE","SHOW_COMPLETED","Footer","filter","activeCount","completedCount","onClickFilter","onClickClearCompleted","xevents","renderTodoCount","useCallback","itemWord","className","count","renderFilterLink","selectedFilter","selected","style","cursor","onClick","clickBy","el","filterBy","type","children","renderClearButton","normal","filters","Object","keys","map","key","TodoTextInput","value","placeholder","newTodo","onSave","inputText","setInputText","handleSubmit","event","text","currentTarget","trim","which","handleChange","target","handleBlur","classes","edit","new","autoFocus","onChange","onBlur","onKeyDown","Header","handleSave","length","todoItem","act","TodoItem","todo","editing","setEditing","handleDoubleClick","id","delete","completed","view","toggle","checked","complete","state","onDoubleClick","destroy","TodoList","todos","hasIncompleted","useMemo","some","main","toggleAll","FILTER_VALUES","FILTER_FUNCTIONS","history","location","todoActions","handleClearCompleted","handleFilterChange","push","filteredTodos","useEffect","ready","time","performance","now","timeEvent","name","Number","clickableElements","enum","todoItemCompleteState","todoItemEditAction","filterType","todosAppXEvents","group","render","todosAppFeature","events","ProofyContext","useXEvents","todoReducer","handleActions","action","payload","reduce","max","Math","rootReducer","logger","store","next","initialState","middleware","Provider","document","getElementById"],"mappings":"iKAKiBA,E,mWAAjB,SAAiBA,GACf,IAAYC,GAAZ,SAAYA,GACV,sBACA,wBACA,4BACA,gCACA,8BACA,oCANF,CAAYA,EAAA,EAAAA,OAAA,EAAAA,KAAI,KASH,EAAAC,QAAU,YAA6CD,EAAKE,UAC5D,EAAAC,SAAW,YAA2CH,EAAKI,WAC3D,EAAAC,WAAa,YAA8BL,EAAKM,aAChD,EAAAC,aAAe,YAA8BP,EAAKQ,eAClD,EAAAC,YAAc,YAAaT,EAAKU,cAChC,EAAAC,eAAiB,YAAaX,EAAKY,iBAflD,CAAiBb,MAAW,KAmBrB,IAAMc,EAAiB,SAACC,GACrB,EAAAd,KAAA,IAAM,gBACd,OAAO,mBAAQ,WAAM,oCAAmBe,EAAgBD,KAAW,CAACA,M,mBCzBtEE,EAAOC,QAAU,CAAC,OAAS,SAAS,OAAS,QAAQ,QAAU,SAAS,KAAO,QAAQ,QAAU,eAAe,KAAO,QAAQ,UAAY,W,mBCA3ID,EAAOC,QAAU,CAAC,OAAS,SAAS,QAAU,SAAS,SAAW,QAAQ,MAAQ,SAAS,eAAiB,W,mBCA5GD,EAAOC,QAAU,CAAC,IAAM,SAAS,KAAO,W,mBCAxCD,EAAOC,QAAU,CAAC,KAAO,SAAS,OAAS,QAAQ,QAAU,SAAS,KAAO,SAAS,KAAO,QAAQ,OAAS,SAAS,UAAY,SAAS,QAAU,SAAS,UAAY,W,+BCOpK,IAAUC,GAAjB,SAAiBA,IACf,SAAYC,GACV,iBACA,uBACA,6BAHF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KADpB,CAAiBD,MAAS,KCR1B,mC,iCCAA,0FAKaE,EAAM,cAAIJ,EAAJ,EAAY,WAAM,OACnC,kBAAC,IAAM,KACL,kBAAC,IAAK,CAACK,KAAK,IAAIC,UAAW,Y,wCCN/BN,EAAOC,QAAU,CAAC,OAAS,W,yICKdM,IAAa,MACvB,IAAUJ,OAAOK,UAAW,MAC7B,EAAC,IAAUL,OAAOM,aAAc,SAChC,EAAC,IAAUN,OAAOO,gBAAiB,Y,GAaxBC,EAAS,SAAC,G,IACrBC,EAAA,EAAAA,OACAC,EAAA,EAAAA,YACAC,EAAA,EAAAA,eACAC,EAAA,EAAAA,cACAC,EAAA,EAAAA,sBAEMC,EAAU,cACVC,EAAkB,IAAMC,aAAY,WACxC,IAAMC,EAA2B,IAAhBP,EAAoB,QAAU,QAC/C,OACE,0BAAMQ,UAAW,IAAMC,OACrB,gCAAST,GAAe,M,IAAgBO,E,WAG3C,CAACP,IAEEU,EAAmB,IAAMJ,aAC7B,SAACK,G,MACC,OACE,uBACEH,UAAW,KAAU,KAAG,EAAC,IAAMI,UAAWb,IAAWY,EAAc,IACnEE,MAAO,CAAEC,OAAQ,WACjBC,QAAS,WACPX,EAAQY,QAAQ,CAACC,GAAI,WACrBb,EAAQc,SAAS,CAACC,KAAMR,IAExBT,EAAcS,IAEhBS,SAAU1B,EAAciB,OAI9B,CAACZ,EAAQG,IAGLmB,EAAoB,IAAMf,aAAY,WAC1C,GAAIL,EAAkB,EACpB,OAAO,4BACLO,UAAW,IAAM1B,eACjBiC,QAAS,WACPX,EAAQY,QAAQ,CAACC,GAAI,UACrBd,KAEFiB,SAAU,sBAGb,CAACnB,IAEJ,OACE,4BAAQO,UAAW,IAAMc,QACtBjB,IACD,wBAAIG,UAAW,IAAMe,SACjBC,OAAOC,KAAK,IAAUnC,QAA8CoC,KAAI,SAACC,GAAQ,OACjF,wBAAIA,IAAKA,EAAKP,SAAUV,EAAiB,IAAUpB,OAAOqC,UAG7DN,M,iBC9DMO,EAAgB,SAAC,G,MAAEC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,YAAaC,EAAA,EAAAA,QAASC,EAAA,EAAAA,OACrD,wBAACC,EAAA,KAAWC,EAAA,KAEZC,EAAe,IAAM7B,aACzB,SAAC8B,GACC,IAAMC,EAAOD,EAAME,cAAcT,MAAMU,OACnB,KAAhBH,EAAMI,QACRR,EAAOK,GACPH,EAAa,OAGjB,CAACF,EAAQE,IAGLO,EAAe,IAAMnC,aACzB,SAAC8B,GACCF,EAAaE,EAAMM,OAAOb,SAE5B,CAACK,IAGGS,EAAa,IAAMrC,aACvB,SAAC8B,GACC,IAAMC,EAAOD,EAAME,cAAcT,MAAMU,OAClCR,GACHC,EAAOK,KAGX,CAACL,IAGGY,EAAU,MAAU,MAErB,IAAMC,OAAQd,EACf,EAAC,IAAMe,KAAMf,E,GAEf,IAAMT,QAGR,OACE,2BACEd,UAAWoC,EACXzB,KAAK,OACL4B,WAAS,EACTjB,YAAaA,EACbD,MAAOI,EACPe,SAAUP,EACVQ,OAAQN,EACRO,UAAWf,KCtDJgB,EAAS,SAAC,G,IAAE/E,EAAA,EAAAA,QACjBgC,EAAU,cACVgD,EAAa,IAAM9C,aACvB,SAAC+B,GACKA,EAAKgB,SACPjD,EAAQkD,SAAST,KAAK,CAACU,IAAK,QAC5BnF,EAAQ,CAAEiE,KAAI,OAGlB,CAACjE,IAGH,OACE,gCACE,qCACA,kBAACwD,EAAa,CAACC,MAAM,GAAGE,SAAO,EAACC,OAAQoB,EAAYtB,YAAY,6B,kCCTzD0B,EAAW,SAAC,G,MAAEC,EAAA,EAAAA,KAAMnF,EAAA,EAAAA,SAAUE,EAAA,EAAAA,WAAYE,EAAA,EAAAA,aAC/C0B,EAAU,cACV,yBAACsD,EAAA,KAASC,EAAA,KAEVC,EAAoB,IAAMtD,aAAY,WAC1CF,EAAQkD,SAAST,KAAK,CAACU,IAAK,UAC5BI,GAAW,KACV,CAACA,IAEEP,EAAa,IAAM9C,aACvB,SAACuD,EAAYxB,GACXjC,EAAQkD,SAAST,KAAK,CAACU,IAAK,QACR,IAAhBlB,EAAKgB,QACPjD,EAAQkD,SAASQ,OAAO,IACxBtF,EAAWqF,IAEXvF,EAAS,CAAEuF,GAAE,EAAExB,KAAI,IAErBsB,GAAW,KAEb,CAACrF,EAAUE,EAAYmF,IAGnBf,EAAU,MAAU,MACvB,IAAMmB,WAAYN,EAAKM,UACxB,EAAC,IAAML,SAAUA,EACjB,EAAC,IAAMpC,SAAUoC,E,IAGnB,OACE,wBAAIlD,UAAWoC,GACZc,EACC,kBAAC9B,EAAa,CACZC,MAAO4B,EAAKpB,KACZL,OAAQ,SAACK,GAAWoB,EAAKI,IAAMT,EAAWK,EAAKI,GAAIxB,MAGrD,yBAAK7B,UAAW,IAAMwD,MACpB,2BACE7C,KAAK,WACLX,UAAW,IAAMyD,OACjBC,QAAST,EAAKM,UACdf,SAAU,WACJS,EAAKI,KACPzD,EAAQkD,SAASa,SAAS,CAACC,MAAOX,EAAKM,UAAY,KAAO,QAC1DrF,EAAa+E,EAAKI,QAIxB,2BAAOQ,cAAe,WAAM,OAAAT,MAAsBH,EAAKpB,MACvD,4BACE7B,UAAW,IAAM8D,QACjBvD,QAAS,WACH0C,EAAKI,KACPrF,EAAWiF,EAAKI,IAChBzD,EAAQkD,SAASQ,OAAO,WC1D3BS,EAAW,SAAC,G,IAAEC,EAAA,EAAAA,MAAOtF,EAAA,EAAAA,QAC1BkB,EAAU,cACVqE,EAAiB,IAAMC,SAAQ,WAAM,OAAAF,EAAMG,MAAK,SAAClB,GAAS,OAACA,EAAKM,eAAY,IAClF,OACE,6BAASvD,UAAW,IAAMoE,MACvBH,GACC,2BACEjE,UAAW,IAAMqE,UACjB1D,KAAK,WACL+C,QAASO,EACTzB,SAAU,WACR5C,EAAQY,QAAQ,CAACC,GAAI,iBACrB/B,EAAQN,iBAId,wBAAI4B,UAAW,IAAMc,QAClBkD,EAAM9C,KAAI,SAAC+B,GAAS,OACnB,kBAACD,EAAQ,CACP7B,IAAK8B,EAAKI,GACVJ,KAAMA,EACN/E,aAAcQ,EAAQR,aACtBF,WAAYU,EAAQV,WACpBF,SAAUY,EAAQZ,iB,kCC3B9B,IAAMwG,EAAiBtD,OAAOC,KAAK,IAAUnC,QAA8CoC,KACzF,SAACC,GAAQ,WAAUrC,OAAOqC,MAGtBoD,IAAgB,MACnB,IAAUzF,OAAOK,UAAW,WAAM,UACnC,EAAC,IAAUL,OAAOM,aAAc,SAAC6D,GAAS,OAACA,EAAKM,WAChD,EAAC,IAAUzE,OAAOO,gBAAiB,SAAC4D,GAAS,OAAAA,EAAKM,W,GAOvCxE,EAAM,SAAC,G,IAAEyF,EAAA,EAAAA,QAASC,EAAA,EAAAA,SACvB7E,EAAU,cACVnB,EAAW,cACXiG,EAAc,YAAejG,GAC7B,2B,yMAAEuF,EAAA,EAAAA,MAAOzE,EAAA,EAAAA,OAQToF,EAAuB,IAAM7E,aAAY,WAC7C4E,EAAYpG,mBACX,CAACoG,IAEEE,EAAqB,IAAM9E,aAC/B,SAACP,GACCiF,EAAQK,KAAK,IAAItF,KAEnB,CAACiF,IAGGM,EAAgB,IAAMZ,SAAQ,WAAM,OAAC3E,EAASyE,EAAMzE,OAAOgF,EAAiBhF,IAAWyE,IAAQ,CAACA,EAAOzE,IACvGC,EAAc,IAAM0E,SAAQ,WAAM,OAAAF,EAAMzE,QAAO,SAAC0D,GAAS,OAACA,EAAKM,aAAWV,SAAQ,CAACmB,IACnFvE,EAAiB,IAAMyE,SAAQ,WAAM,OAAAF,EAAMzE,QAAO,SAAC0D,GAAS,OAAAA,EAAKM,aAAWV,SAAQ,CAACmB,IAM3F,OAJA,IAAMe,WAAU,WACdnF,EAAQoF,MAAM,CAACC,KAAMC,YAAYC,UAChC,IAGD,yBAAKnF,UAAW,IAAMc,QACpB,kBAAC6B,EAAM,CAAC/E,QAAS8G,EAAY9G,UAC7B,kBAACmG,EAAQ,CAACC,MAAOc,EAAepG,QAASgG,IACzC,kBAACpF,EAAM,CACLC,OAAQA,EACRC,YAAaA,EACbC,eAAgBA,EAChBE,sBAAuBgF,EACvBjF,cAAekF,O,0DC7DjBQ,EAAY,SAACC,GAAiB,yBACnC,SAAC,G,IAACJ,EAAA,EAAAA,KAAU,OAAGI,EAAI,OAAOJ,EAAK5D,MAAK,OACpC,CAAC4D,KAAM,CAAEI,KAAM,OAAQ1E,KAAM2E,WAGxBC,EAAoB,SAAOC,KAAK,UAAW,CAChD,eAAgB,eAChB,MAAS,kBACT,OAAU,iBAGLC,EAAwB,SAAOD,KAAK,WAAY,CACrD,IAAO,OACP,GAAM,UAGDE,EAAqB,SAAOF,KAAK,cAAe,CACrD,IAAO,QACP,MAAS,gBACT,IAAO,0BAGFG,EAAa,SAAOH,KAAK,WAAQ,MACrC,IAAU1G,OAAOM,aAAc,SAChC,EAAC,IAAUN,OAAOK,UAAW,MAC7B,EAAC,IAAUL,OAAOO,gBAAiB,Y,IAGvBuG,EAAkB,SAAOC,MAAM,aAAc,CACzDC,OAAQV,EAAU,UAClBJ,MAAOI,EAAU,SAEjB5E,QAAS,kBAAO,SAAC,GAAS,mBAAR,EAAAC,GAAwB4E,KAAI,MAAK,CAAC5E,GAAI8E,IACxD7E,SAAU,kBAAO,SAAC,GAAW,oBAAV,EAAAC,KAA6B0E,KAAI,MAAK,CAAC1E,KAAMgF,IAEhE7C,SAAU,SAAO+C,MAAM,WAAY,CAClCxD,KAAM,kBAAO,SAAC,GAAU,OAAT,EAAAU,IAAasC,OAAM,CAACtC,IAAK2C,IACxC/B,SAAU,kBAAO,SAAC,GAAY,8BAAX,EAAAC,MAAyCyB,KAAI,MAAK,CAACzB,MAAO6B,IAC7EnC,OAAQ,iBAAO,SAAU,QCzC3B,sGAIO,IAAMyC,EAAkB,wBAAc,CAC5C1C,GAAI,QACJgC,KAAM,YACNW,OAAQJ,IAGIK,EAAgB,wBAAcF,GAEpC,SAASG,IACf,OAAO,qBAAWD,GAAeD,S,ogBCArBG,EAAc,OAAAC,EAAA,KAAa,MAEnC,IAAYzI,KAAKE,UAAW,SAAC+F,EAAOyC,GACnC,OAAIA,EAAOC,SAAWD,EAAOC,QAAQzE,KAC5B,EAAP,CACE,CACEwB,GAAIO,EAAM2C,QAAO,SAACC,EAAKvD,GAAS,OAAAwD,KAAKD,IAAIvD,EAAKI,IAAM,EAAGmD,KAAM,GAAK,EAClEjD,WAAW,EACX1B,KAAMwE,EAAOC,QAAQzE,OAEpB+B,GAGAA,GAET,EAAC,IAAYjG,KAAKM,aAAc,SAAC2F,EAAOyC,GACtC,OAAOzC,EAAMrE,QAAO,SAAC0D,GAAS,OAAAA,EAAKI,KAAQgD,EAAOC,YAEpD,EAAC,IAAY3I,KAAKI,WAAY,SAAC6F,EAAOyC,GACpC,OAAOzC,EAAM1C,KAAI,SAAC+B,GAChB,OAAKA,GAASoD,GAAWA,EAAOC,UAGxBrD,EAAKI,IAAM,KAAOgD,EAAOC,QAAQjD,GAAK,EAAD,KAAMJ,GAAI,CAAEpB,KAAMwE,EAAOC,QAAQzE,OAFrEoB,MAKb,EAAC,IAAYtF,KAAKQ,eAAgB,SAACyF,EAAOyC,GACxC,OAAOzC,EAAM1C,KAAI,SAAC+B,GAChB,OAAAA,EAAKI,KAAQgD,EAAOC,QAAkB,EAAD,KAAMrD,GAAI,CAAEM,WAAYN,EAAKM,YAAcN,MAGpF,EAAC,IAAYtF,KAAKU,cAAe,SAACuF,EAAOyC,GACvC,OAAOzC,EAAM1C,KAAI,SAAC+B,GAAS,cAAMA,GAAI,CAAEM,WAAW,QAEpD,EAAC,IAAY5F,KAAKY,iBAAkB,SAACqF,EAAOyC,GAC1C,OAAOzC,EAAMrE,QAAO,SAAC0D,GAAS,OAAmB,IAAnBA,EAAKM,c,GA3CC,CACxC,CACEF,GAAI,EACJxB,KAAM,YACN0B,WAAW,KCHFmD,EAAc,0BAA2B,CACpD1C,MAAOmC,ICLIQ,EAAqB,SAACC,GAAU,gBAACC,GAAS,gBAACR,GAItD,OAAOQ,EAAKR,M,YCDiBS,EACzBC,E,8BCKA,EAAU,cACV,GDNAA,EAAa,0BAAgB,IAAOJ,GAM1B,sBAAYD,EAAoBI,EAAqBC,ICGrE,8BAAmB,GACnB,IAAgBf,OAAOF,OAAO,CAACb,KAAMC,YAAYC,QAEjD,IAASW,OACP,kBAAC,IAAckB,SAAQ,CAAC3F,MAAO,KAC7B,kBAAC,IAAQ,CAACuF,MAAO,GACf,kBAAC,IAAM,CAACpC,QAAS,GACf,kBAAC,IAAG,SAIVyC,SAASC,eAAe,W","file":"app.d4ee2c6c4527ffe457b2.js","sourcesContent":["import { useMemo } from 'react';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { createAction } from 'redux-actions';\nimport { TodoModel } from 'app/models';\n\nexport namespace TodoActions {\n  export enum Type {\n    ADD_TODO = 'ADD_TODO',\n    EDIT_TODO = 'EDIT_TODO',\n    DELETE_TODO = 'DELETE_TODO',\n    COMPLETE_TODO = 'COMPLETE_TODO',\n    COMPLETE_ALL = 'COMPLETE_ALL',\n    CLEAR_COMPLETED = 'CLEAR_COMPLETED'\n  }\n\n  export const addTodo = createAction<PartialPick<TodoModel, 'text'>>(Type.ADD_TODO);\n  export const editTodo = createAction<PartialPick<TodoModel, 'id'>>(Type.EDIT_TODO);\n  export const deleteTodo = createAction<TodoModel['id']>(Type.DELETE_TODO);\n  export const completeTodo = createAction<TodoModel['id']>(Type.COMPLETE_TODO);\n  export const completeAll = createAction(Type.COMPLETE_ALL);\n  export const clearCompleted = createAction(Type.CLEAR_COMPLETED);\n}\n\nexport type TodoActions = Omit<typeof TodoActions, 'Type'>;\nexport const useTodoActions = (dispatch: Dispatch) => {\n  const { Type, ...actions } = TodoActions;\n  return useMemo(() => bindActionCreators(actions as any, dispatch), [dispatch]) as TodoActions;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"normal\":\"_3Ivjf\",\"toggle\":\"gyYcA\",\"destroy\":\"_6oXTL\",\"edit\":\"Dlke2\",\"editing\":\"atkUq _3Ivjf\",\"view\":\"R2I1d\",\"completed\":\"_2d4Cr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"normal\":\"_11G5b\",\"filters\":\"_2Rdg5\",\"selected\":\"KA4tP\",\"count\":\"_2aiYj\",\"clearCompleted\":\"_2VhED\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"new\":\"_1LCq9\",\"edit\":\"_2TStV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"_1MAoA\",\"normal\":\"l9hMg\",\"editing\":\"_2LE8Z\",\"edit\":\"_3IEu8\",\"view\":\"cswuJ\",\"toggle\":\"_1euYG\",\"completed\":\"_1VEnC\",\"destroy\":\"_3_fjc\",\"toggleAll\":\"_1L1bM\"};","/** TodoMVC model definitions **/\n\nexport interface TodoModel {\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\nexport namespace TodoModel {\n  export enum Filter {\n    SHOW_ALL = 'all',\n    SHOW_ACTIVE = 'active',\n    SHOW_COMPLETED = 'completed'\n  }\n}\n","export * from './TodoModel';\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { App as TodoApp } from 'app/containers/App';\nimport { hot } from 'react-hot-loader';\n\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={TodoApp} />\n  </Switch>\n));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"normal\":\"_1XP1U\"};","import React from 'react';\nimport style from './style.css';\nimport classNames from 'classnames';\nimport { TodoModel } from 'app/models';\nimport { useXEvents } from '../../../xfeature';\n\nexport const FILTER_TITLES = {\n  [TodoModel.Filter.SHOW_ALL]: 'All',\n  [TodoModel.Filter.SHOW_ACTIVE]: 'Active',\n  [TodoModel.Filter.SHOW_COMPLETED]: 'Completed'\n};\n\nexport namespace Footer {\n  export interface Props {\n    filter: TodoModel.Filter;\n    activeCount?: number;\n    completedCount?: number;\n    onClickFilter: (filter: TodoModel.Filter) => any;\n    onClickClearCompleted: () => any;\n  }\n}\n\nexport const Footer = ({\n  filter,\n  activeCount,\n  completedCount,\n  onClickFilter,\n  onClickClearCompleted\n}: Footer.Props): JSX.Element => {\n  const xevents = useXEvents()\n  const renderTodoCount = React.useCallback((): JSX.Element => {\n    const itemWord = activeCount === 1 ? ' item' : 'items';\n    return (\n      <span className={style.count}>\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\n      </span>\n    );\n  }, [activeCount]);\n\n  const renderFilterLink = React.useCallback(\n    (selectedFilter: TodoModel.Filter): JSX.Element => {\n      return (\n        <a\n          className={classNames({ [style.selected]: filter === selectedFilter })}\n          style={{ cursor: 'pointer' }}\n          onClick={() => {\n            xevents.clickBy({el: 'filter'});\n            xevents.filterBy({type: selectedFilter});\n      \n            onClickFilter(selectedFilter);\n          }}\n          children={FILTER_TITLES[selectedFilter]}\n        />\n      );\n    },\n    [filter, onClickFilter]\n  );\n\n  const renderClearButton = React.useCallback((): JSX.Element | void => {\n    if (completedCount! > 0) {\n      return <button\n        className={style.clearCompleted}\n        onClick={() => {\n          xevents.clickBy({el: 'clear'});\n          onClickClearCompleted();\n        }}\n        children={'Clear completed'}\n      />;\n    }\n  }, [completedCount]);\n\n  return (\n    <footer className={style.normal}>\n      {renderTodoCount()}\n      <ul className={style.filters}>\n        {(Object.keys(TodoModel.Filter) as (keyof typeof TodoModel.Filter)[]).map((key) => (\n          <li key={key} children={renderFilterLink(TodoModel.Filter[key])} />\n        ))}\n      </ul>\n      {renderClearButton()}\n    </footer>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport style from './style.css';\n\nexport namespace TodoTextInput {\n  export interface Props {\n    value: string\n    placeholder?: string;\n    newTodo?: boolean;\n    onSave: (text: string) => void;\n  }\n\n  export interface State {\n    text: string;\n  }\n}\n\nexport const TodoTextInput = ({ value, placeholder, newTodo, onSave }: TodoTextInput.Props): JSX.Element => {\n  const [inputText, setInputText] = useState(value);\n\n  const handleSubmit = React.useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const text = event.currentTarget.value.trim();\n      if (event.which === 13) {\n        onSave(text);\n        setInputText('');\n      }\n    },\n    [onSave, setInputText]\n  );\n\n  const handleChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setInputText(event.target.value);\n    },\n    [setInputText]\n  );\n\n  const handleBlur = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const text = event.currentTarget.value.trim();\n      if (!newTodo) {\n        onSave(text);\n      }\n    },\n    [onSave]\n  );\n\n  const classes = classNames(\n    {\n      [style.edit]: !newTodo,\n      [style.new]: newTodo\n    },\n    style.normal\n  );\n\n  return (\n    <input\n      className={classes}\n      type=\"text\"\n      autoFocus\n      placeholder={placeholder}\n      value={inputText}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      onKeyDown={handleSubmit}\n    />\n  );\n};\n","import React from 'react';\nimport { TodoTextInput } from '../TodoTextInput';\nimport { TodoActions } from 'app/actions/todos';\nimport { useXEvents } from '../../../xfeature';\n\nexport namespace Header {\n  export interface Props {\n    addTodo: typeof TodoActions.addTodo;\n  }\n}\n\nexport const Header = ({ addTodo }: Header.Props): JSX.Element => {\n  const xevents = useXEvents();\n  const handleSave = React.useCallback(\n    (text: string) => {\n      if (text.length) {\n        xevents.todoItem.edit({act: 'add'});\n        addTodo({ text });\n      }\n    },\n    [addTodo]\n  );\n\n  return (\n    <header>\n      <h1>Todos</h1>\n      <TodoTextInput value=\"\" newTodo onSave={handleSave} placeholder=\"What needs to be done?\" />\n    </header>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport style from './style.css';\nimport { TodoModel } from 'app/models';\nimport { TodoActions } from 'app/actions';\nimport { TodoTextInput } from '../TodoTextInput';\nimport { useXEvents } from '../../../xfeature';\n\nexport namespace TodoItem {\n  export interface Props {\n    todo: TodoModel;\n    editTodo: typeof TodoActions.editTodo;\n    deleteTodo: typeof TodoActions.deleteTodo;\n    completeTodo: typeof TodoActions.completeTodo;\n  }\n}\n\nexport const TodoItem = ({ todo, editTodo, deleteTodo, completeTodo }: TodoItem.Props) => {\n  const xevents = useXEvents();\n  const [editing, setEditing] = useState(false);\n\n  const handleDoubleClick = React.useCallback(() => {\n    xevents.todoItem.edit({act: 'start'});\n    setEditing(true);\n  }, [setEditing]);\n\n  const handleSave = React.useCallback(\n    (id: number, text: string) => {\n      xevents.todoItem.edit({act: 'end'});\n      if (text.length === 0) {\n        xevents.todoItem.delete({});\n        deleteTodo(id);\n      } else {\n        editTodo({ id, text });\n      }\n      setEditing(false);\n    },\n    [editTodo, deleteTodo, setEditing]\n  );\n\n  const classes = classNames({\n    [style.completed]: todo.completed,\n    [style.editing]: editing,\n    [style.normal]: !editing\n  });\n\n  return (\n    <li className={classes}>\n      {editing ? (\n        <TodoTextInput\n          value={todo.text}\n          onSave={(text) => { todo.id && handleSave(todo.id, text)}}\n        />\n      ) : (\n        <div className={style.view}>\n          <input\n            type=\"checkbox\"\n            className={style.toggle}\n            checked={todo.completed}\n            onChange={() => {\n              if (todo.id) {\n                xevents.todoItem.complete({state: todo.completed ? 'no' : 'yes'});\n                completeTodo(todo.id)\n              }\n            }}\n          />\n          <label onDoubleClick={() => handleDoubleClick()}>{todo.text}</label>\n          <button\n            className={style.destroy}\n            onClick={() => {\n              if (todo.id) {\n                deleteTodo(todo.id);\n                xevents.todoItem.delete({});\n              }\n            }}\n          />\n        </div>\n      )}\n    </li>\n  );\n};\n","import React from 'react';\nimport style from './style.css';\nimport { TodoActions } from 'app/actions/todos';\nimport { TodoItem } from '../TodoItem';\nimport { TodoModel } from 'app/models/TodoModel';\nimport { useXEvents } from '../../../xfeature';\n\nexport namespace TodoList {\n  export interface Props {\n    todos: TodoModel[];\n    actions: TodoActions;\n  }\n}\n\nexport const TodoList = ({ todos, actions }: TodoList.Props): JSX.Element => {\n  const xevents = useXEvents();\n  const hasIncompleted = React.useMemo(() => todos.some((todo) => !todo.completed), []);\n  return (\n    <section className={style.main}>\n      {hasIncompleted && (\n        <input\n          className={style.toggleAll}\n          type=\"checkbox\"\n          checked={hasIncompleted}\n          onChange={() => {\n            xevents.clickBy({el: 'complete-all'})\n            actions.completeAll();\n          }}\n        />\n      )}\n      <ul className={style.normal}>\n        {todos.map((todo) => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            completeTodo={actions.completeTodo}\n            deleteTodo={actions.deleteTodo}\n            editTodo={actions.editTodo}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n};\n","import React from 'react';\nimport style from './style.css';\nimport { RouteComponentProps } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTodoActions } from 'app/actions';\nimport { RootState } from 'app/reducers';\nimport { TodoModel } from 'app/models';\nimport { Header, TodoList, Footer } from 'app/components';\nimport { useXEvents } from '../../../xfeature';\n\nconst FILTER_VALUES = (Object.keys(TodoModel.Filter) as (keyof typeof TodoModel.Filter)[]).map(\n  (key) => TodoModel.Filter[key]\n);\n\nconst FILTER_FUNCTIONS: Record<TodoModel.Filter, (todo: TodoModel) => boolean> = {\n  [TodoModel.Filter.SHOW_ALL]: () => true,\n  [TodoModel.Filter.SHOW_ACTIVE]: (todo) => !todo.completed,\n  [TodoModel.Filter.SHOW_COMPLETED]: (todo) => todo.completed\n};\n\nexport namespace App {\n  export interface Props extends RouteComponentProps<void> {}\n}\n\nexport const App = ({ history, location }: App.Props) => {\n  const xevents = useXEvents()\n  const dispatch = useDispatch();\n  const todoActions = useTodoActions(dispatch);\n  const { todos, filter } = useSelector((state: RootState) => {\n    const hash = location?.hash?.replace('#', '');\n    return {\n      todos: state.todos,\n      filter: FILTER_VALUES.find((value) => value === hash) ?? TodoModel.Filter.SHOW_ALL\n    };\n  });\n\n  const handleClearCompleted = React.useCallback((): void => {\n    todoActions.clearCompleted();\n  }, [todoActions]);\n\n  const handleFilterChange = React.useCallback(\n    (filter: TodoModel.Filter): void => {\n      history.push(`#${filter}`);\n    },\n    [history]\n  );\n\n  const filteredTodos = React.useMemo(() => (filter ? todos.filter(FILTER_FUNCTIONS[filter]) : todos), [todos, filter]);\n  const activeCount = React.useMemo(() => todos.filter((todo) => !todo.completed).length, [todos]);\n  const completedCount = React.useMemo(() => todos.filter((todo) => todo.completed).length, [todos]);\n\n  React.useEffect(() => {\n    xevents.ready({time: performance.now()});\n  }, []);\n\n  return (\n    <div className={style.normal}>\n      <Header addTodo={todoActions.addTodo} />\n      <TodoList todos={filteredTodos} actions={todoActions} />\n      <Footer\n        filter={filter}\n        activeCount={activeCount}\n        completedCount={completedCount}\n        onClickClearCompleted={handleClearCompleted}\n        onClickFilter={handleFilterChange}\n      />\n    </div>\n  );\n};\n","import { xevent } from 'proofy';\nimport { TodoModel } from 'app/models';\n\nconst timeEvent = (name: string) => xevent(\n\t({time}) => `${name} at ${time.value}ms`,\n\t{time: { name: 'Time', type: Number }},\n);\n\nconst clickableElements = xevent.enum('Element', {\n\t'complete-all': 'Complete all',\n\t'clear': 'Clear completed',\n\t'filter': 'Filter todos',\n});\n\nconst todoItemCompleteState = xevent.enum('Complete', {\n\t'yes': 'True',\n\t'no': 'False',\n});\n\nconst todoItemEditAction = xevent.enum('Edit action', {\n\t'add': 'Added',\n\t'start': 'Start editing',\n\t'end': 'Completion of editing',\n});\n\nconst filterType = xevent.enum('Filter', {\n\t[TodoModel.Filter.SHOW_ACTIVE]: 'Active',\n\t[TodoModel.Filter.SHOW_ALL]: 'All',\n\t[TodoModel.Filter.SHOW_COMPLETED]: 'Completed',\n});\n\nexport const todosAppXEvents = xevent.group('App Events', {\n\trender: timeEvent('render'),\n\tready: timeEvent('ready'),\n\n\tclickBy: xevent(({el}) => `Click by \"${el.name}\"`, {el: clickableElements}),\n\tfilterBy: xevent(({type}) => `Filter by \"${type.name}\"`, {type: filterType}),\n\n\ttodoItem: xevent.group('TodoItem', {\n\t\tedit: xevent(({act}) => act.name, {act: todoItemEditAction}),\n\t\tcomplete: xevent(({state}) => `Complete changed to \"${state.name}\"`, {state: todoItemCompleteState}),\n\t\tdelete: xevent(`Delete`, {}),\n\t}),\n});\n","import { createContext, useContext } from 'react';\nimport { createFeature } from 'proofy';\nimport { todosAppXEvents } from './xevents';\n\nexport const todosAppFeature = createFeature({\n\tid: 'todos',\n\tname: 'Todos App',\n\tevents: todosAppXEvents,\n});\n\nexport const ProofyContext = createContext(todosAppFeature);\n\nexport function useXEvents() {\n\treturn useContext(ProofyContext).events;\n}\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\nimport { TodoActions } from 'app/actions/todos';\nimport { TodoModel } from 'app/models';\n\nconst initialState: RootState.TodoState = [\n  {\n    id: 1,\n    text: 'Use Redux',\n    completed: false\n  }\n];\n\nexport const todoReducer = handleActions<RootState.TodoState, TodoModel>(\n  {\n    [TodoActions.Type.ADD_TODO]: (state, action) => {\n      if (action.payload && action.payload.text) {\n        return [\n          {\n            id: state.reduce((max, todo) => Math.max(todo.id || 1, max), 0) + 1,\n            completed: false,\n            text: action.payload.text\n          },\n          ...state\n        ];\n      }\n      return state;\n    },\n    [TodoActions.Type.DELETE_TODO]: (state, action) => {\n      return state.filter((todo) => todo.id !== (action.payload as any));\n    },\n    [TodoActions.Type.EDIT_TODO]: (state, action) => {\n      return state.map((todo) => {\n        if (!todo || !action || !action.payload) {\n          return todo;\n        }\n        return (todo.id || 0) === action.payload.id ? { ...todo, text: action.payload.text } : todo;\n      });\n    },\n    [TodoActions.Type.COMPLETE_TODO]: (state, action) => {\n      return state.map((todo) =>\n        todo.id === (action.payload as any) ? { ...todo, completed: !todo.completed } : todo\n      );\n    },\n    [TodoActions.Type.COMPLETE_ALL]: (state, action) => {\n      return state.map((todo) => ({ ...todo, completed: true }));\n    },\n    [TodoActions.Type.CLEAR_COMPLETED]: (state, action) => {\n      return state.filter((todo) => todo.completed === false);\n    }\n  },\n  initialState\n);\n","import { combineReducers } from 'redux';\nimport { RootState } from './state';\nimport { todoReducer } from './todos';\n\nexport { RootState };\n\nexport const rootReducer = combineReducers<RootState>({\n  todos: todoReducer\n});\n","import { Middleware } from 'redux';\n\nexport const logger: Middleware = (store) => (next) => (action) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(action);\n  }\n  return next(action);\n};\n","import { Store, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState, rootReducer } from 'app/reducers';\nimport { logger, thunk } from 'app/middleware';\n\nexport function configureStore(initialState?: RootState): Store<RootState> {\n  let middleware = applyMiddleware(thunk, logger);\n\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware);\n  }\n\n  const store = createStore(rootReducer as any, initialState as any, middleware) as Store<RootState>;\n\n  if (module.hot) {\n    module.hot.accept('app/reducers', () => {\n      const nextReducer = require('app/reducers');\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createBrowserHistory } from 'history';\nimport { configureStore } from 'app/store';\nimport { Router } from 'react-router';\nimport { App } from './app';\nimport { todosAppFeature, ProofyContext } from './xfeature';\nimport { verboseExperiments } from 'proofy';\n\n// prepare store\nconst history = createBrowserHistory();\nconst store = configureStore();\n\n// prepare xevents\nverboseExperiments(true);\ntodosAppFeature.events.render({time: performance.now()})\n\nReactDOM.render(\n  <ProofyContext.Provider value={todosAppFeature}>\n    <Provider store={store}>\n      <Router history={history}>\n        <App />\n      </Router>\n    </Provider>\n  </ProofyContext.Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}